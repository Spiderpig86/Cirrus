@use 'sass:map';

@use '../internal' as *;

@if should-generate-classes($FLEX) {
    $flex-directions: row, row-reverse, column, column-reverse;
    $justify-content: flex-start, center, flex-end, space-between, space-around, space-evenly;
    $align-items: stretch, flex-start, center, flex-end, baseline;
    $flex-grow: 0, 1;
    $flex-wrap: wrap, wrap-reverse, nowrap;
    $flex-basis: map.merge(
        to-property-map((auto, max-content, min-content, fit-content, content, revert, revert-layer)),
        $default-percentages
    );

    @include utility(
        $class-value-pairs: class-value-map-with-single-property('flex-direction', to-property-map($flex-directions)),
        $common-class-name: 'flex',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('justify-content', to-property-map($justify-content)),
        $common-class-name: 'justify',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('align-items', to-property-map($align-items)),
        $common-class-name: 'items',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );

    // Flex grow/shrink utils
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('flex-grow', to-property-map($flex-grow)),
        $common-class-name: 'flex-grow',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );

    @include utility(
        $class-value-pairs: class-value-map-with-single-property('flex-shrink', to-property-map($flex-grow)),
        $common-class-name: 'flex-shrink',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );

    // Flex wrap
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('flex-wrap', to-property-map($flex-wrap)),
        $common-class-name: 'flex',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );

    // Flex basis
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('flex-basis', $flex-basis),
        $common-class-name: 'basis',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($FLEX)},
        $override: '!important'
    );
}

// TODO: Move to gap.scss
@if should-generate-classes($GAP) {
    // Generate flex gap class map
    $gaps-both: ();
    // TODO: Consider if we need to generate for row and col only
    @each $class, $size in $spacing-system {
        $gaps-both: map-merge(
            $gaps-both,
            (
                $class: $size,
            )
        );
    }

    @include utility(
        $class-value-pairs: class-value-map-with-single-property('gap', $gaps-both),
        $common-class-name: 'gap',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($GAP)},
        $override: '!important'
    );

    
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('row-gap', $gaps-both),
        $common-class-name: 'row-gap',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($GAP)},
        $override: '!important'
    );
    
    @include utility(
        $class-value-pairs: class-value-map-with-single-property('col-gap', $gaps-both),
        $common-class-name: 'col-gap',
        $variants: (),
        $generate-viewports: #{get-viewport-flag($GAP)},
        $override: '!important'
    );
}
